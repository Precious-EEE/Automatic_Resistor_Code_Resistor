# -*- coding: utf-8 -*-
"""Automatic_Resistor_Reader_with_FastAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NuH9Srw7T_klF0H28IS_D3-cZr2XPAOM
"""

# mount your google drive
from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install timm
# !pip install fastai

import os
import pandas as pd
import numpy as np
from PIL import Image as PImage # TO avoid confusion later
import matplotlib.pyplot as plt

folders =os.listdir("/content/drive/MyDrive/archive/")

all_paths = []
for i in folders:
  c = os.listdir("/content/drive/MyDrive/archive/{}".format(i))
  c = ["/content/drive/MyDrive/archive/"+i +"/" + x for x in c]
  all_paths = all_paths+c

all_paths

print("The number of files in first set is",len(all_paths))
print("The type of first set is",type(all_paths))

df = pd.DataFrame(all_paths, columns=["file_paths"])
df.tail()

labels = [i.split("/")[-2] for i in all_paths]

df["labels"] = labels

df

import pandas as pd
import os

# Assuming you have a DataFrame named "df" with columns "file_paths" and "labels"
# Replace "file_paths" and "labels" with the actual column names in your DataFrame

# Function to check if the file path ends with .png or .jpg
def is_image_file(file_path):
    return file_path.lower().endswith(('.png', '.jpg'))

# Apply the is_image_file function to filter rows in the DataFrame
df = df[df['file_paths'].apply(is_image_file)]

# Optional: If you want to reset the index after filtering
df.reset_index(drop=True, inplace=True)

df

!pip install -q --upgrade fastai # Make sure we have the latest fastai

from fastai.vision.all import *

import fastai
print(fastai.__version__ )

resistors = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    splitter=TrainTestSplitter(0.3, stratify=df["labels"]),
    get_x = ColReader(0),
    get_y=ColReader(1),
    item_tfms=Resize(256),
    batch_tfms = None)
dls = resistors.dataloaders(df)

dls.valid.show_batch(max_n=4, nrows=1)

dls.train.show_batch(max_n=10, nrows=2)

import timm
timm.list_models('res*')

learn = vision_learner(dls,'resnet18', metrics=[accuracy])

learn.fine_tune(10) # or use defaults

learn.show_results()

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_confusion_matrix()

learn_1 = vision_learner(dls,'resnet50', metrics=[accuracy])

learn_1.fine_tune(10)

learn_1.show_results()

learn_2 = vision_learner(dls,'resnet51q', metrics=[accuracy])

learn_2.fine_tune(5)

learn_2.show_results()

learn_3 = vision_learner(dls,'resnet61q', metrics=[accuracy])

#learn_3.fine_tune(3)

learn_3.show_results()

timm.list_models('eff*')

learn_4 = vision_learner(dls,'efficientnet_b0', metrics=[accuracy])

learn_4.fine_tune(5)

learn_4.show_results()

learn_4.export()